package evalg.doors.gen;

import org.nlogo.headless.HeadlessWorkspace;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.ArrayList;


public class MainClass {
	
	public static int getGenIndex(double r, int max) {
		/*
		 * Lo hago como funcion, para encapsular, y así dejar más 
		 * limpio el codigo y hacerlo más escalable.
		 * */
		return (int) Math.floor(max*r);
	}
	
	public static void runProgram(HeadlessWorkspace hlwsp, String nlAppPath, ArrayList<Genome> generation) {
		try {
			hlwsp.open
                (nlAppPath);
			hlwsp.command("set density 62");
			hlwsp.command("random-seed 0");
			hlwsp.command("setup");
			hlwsp.command("repeat 50 [ go ]") ;
            System.out.println
                (hlwsp.report("burned-trees"));
            hlwsp.dispose();
        }
        catch(Exception ex) {
            ex.printStackTrace();
        }
	}
	
	public static long calcVariabilidad(ArrayList<Genome> generation) {
		return 0;
	}

	public static void main(String[] args) {
		HeadlessWorkspace wsp = HeadlessWorkspace.newInstance();
		String wkspc = new File("").getAbsolutePath()+"/src/";
		String [] buildingFiles = {"conference.plan","office.plan","office.plan"};
		int generation_size = 20;
		int genome_size = 5;
		
		
		for(String buildingFile: buildingFiles) {
			//la idea es: por cada archivo, parsear los puntos y ponerlos en contenedores distintos
			ArrayList<Gen> outside = new ArrayList<>();
			ArrayList<Gen> inside = new ArrayList<>();
			ArrayList<Gen> wall = new ArrayList<>();
			File buildingPlan = new File(wkspc+"buildings/"+buildingFile);
			try {
				Scanner reader = new Scanner(buildingPlan);
				while(reader.hasNextLine()) {
					String [] line = reader.nextLine().split(" ");
					switch (Integer.parseInt(line[3])) {
					case 0:
						inside.add(new Gen(Integer.parseInt(line[0]),Integer.parseInt(line[1])));
						break;
					case 2:
						outside.add(new Gen(Integer.parseInt(line[0]),Integer.parseInt(line[1])));
						break;
					case 64:
						wall.add(new Gen(Integer.parseInt(line[0]),Integer.parseInt(line[1])));
						break;
					}
				}
				reader.close();
				//luego, generar 5 numeros aleatorios Ri (i=1..5), tal que 
				// si |wall| = Nw, y f(x) : Dom(R)->[0,Nw]; f(x) = mx+b, y R e [0,1]
				// plt, f(x) = Nw*x
				ArrayList<ArrayList<Genome>> generations = new ArrayList<>();
				generations.add(new ArrayList<>());
				for (int i = 0; i < generation_size; i++) {
					Genome genome = new Genome(genome_size);
					for (int j = 0; j < genome_size; j++) {
						int gen_idx = getGenIndex(Math.random(),wall.size());
						while (genome.exist(gen_idx)) gen_idx = getGenIndex(Math.random(),wall.size());
						genome.addGen(wall.get(gen_idx), gen_idx);
					}
					generations.get(0).add(genome);
				}
				int gen_idx = 0;
				double var_delta = 0; //some number;
				do {
					runProgram(wsp, wsp+"program/escape4_v6.nlogo", generations.get(gen_idx));
					//select best
					//select worst
					//generate random
					//select for mutation
					//mutate
					//select for reproduction
					//reproduce
				}while(calcVariabilidad(generations.get(gen_idx++)) <= var_delta);
				
			}catch(FileNotFoundException e) {
				e.printStackTrace();
			}
		}
		
        /*try {
            java.awt.EventQueue.invokeAndWait
                ( new Runnable()
                    { public void run() {
                        try {
                          App.app().open
                              ("program/"
                               + "escape4_v6.nlogo");
                        }
                        catch( java.io.IOException ex ) {
                          ex.printStackTrace();
                        }
                    } } );
            App.app().command("set density 62");
            App.app().command("random-seed 0");
            App.app().command("setup");
            App.app().command("repeat 50 [ go ]");
            System.out.println
                (App.app().report("burned-trees"));
        }
        catch(Exception ex) {
            ex.printStackTrace();
        }*/	
	}

}
